#ifndef DragAndDropModuleIncluded
#define DragAndDropModuleIncluded
#module DragAndDropModule
#uselib "shell32.dll"   ;   ★ドラッグ＆ドロップをするAPI
#func DragAcceptFiles   "DragAcceptFiles"   int, int
#func DragQueryFile     "DragQueryFileA"    int, int, var, int
#func DragQueryPoint    "DragQueryPoint"    int, var
#func DragFinish        "DragFinish"        int
#define WM_DROPFILES    $0233   ;   DragAndDrop

#define global DandD_SetSubLabel(%1=0) DadmLabel@DragAndDropModule=%1

#deffunc DandD_SetWindow int f
    if f {
        oncmd gosub *DadmGetMessageL, WM_DROPFILES
        DragAcceptFiles hwnd, 1 ;   On
    } else {
        DragAcceptFiles hwnd, 0 ;   Off
    }
    return

#deffunc DandD_GetList var s
    s = DadmList
    return

#defcfunc DandD_GetPath int i
    notesel DadmList  : noteget sb, i  : noteunsel
    return sb

#defcfunc DandD_GetInfo int f
    return DadmInfo(f)

*DadmGetMessageL    ;   メッセージ到着
    hDrop = wParam  ;   内部ハンドル
    DadmInfo(3) = ginfo_intid   ;           対象のウィンドウID
    DragQueryPoint hDrop, DadmInfo(1)   ;   座標
    DragQueryFile hDrop, -1, DadmInfo, 0    ;   変数はダミー
    DadmInfo = stat ;                       ファイル数
    DadmList = ""
    repeat DadmInfo
        DragQueryFile hDrop, cnt, sb, 0 ;   文字数は？
        if sbleng <= stat  : sbleng = stat + 1  : sdim sb, sbleng
        DragQueryFile hDrop, cnt, sb, sbleng    ;   取得
        DadmList += sb + "\n"
    loop
    DragFinish hDrop    ;   内部ハンドル解放
    if vartype(DadmLabel) == 1  : gosub DadmLabel   ;   サブルーチン
    return 0    ;   メッセージ処理完了
; http://www.tvg.ne.jp/menyukko/
; Copyright(C) 2011 衣日和 All rights reserved.
#global
#endif


	;***** フォント選択ダイアログを表示  (fileop27.hsp) *****

#module
	;▼必要となるAPIや定数の定義
#uselib "gdi32.dll"
#func  GetObject "GetObjectA" int,int,var

#uselib "comdlg32.dll"
#func  ChooseFont "ChooseFontA" var

	; ・引数  Value   (array)      : 数値型配列変数
	;         nOption (int) ($100) : 0〜(0) オプション値

#deffunc fontdlg array prm1,int prm2
	mref bmscr,67
	mref ref,65
	nOption = prm2 : if nOption<=0 : nOption=0

	dim lpObject,64   ;LOGFONT構造体
	dim chf,15        ;CHOOSEFONT構造体
	dim retval,8      ;取得値退避用

	GetObject bmscr(38),60,lpObject

	;CHOOSEFONT構造体
	chf(0)  = 60
	chf(1)  = hwnd
	chf(3)  = varptr(lpObject)
	chf(5)  = $41|nOption
	chf(6)  = bmscr(40)
	chf(12) = $2000

	ChooseFont chf
	ret=stat
	if ret!0 {
		repeat 32
			prm=peek(lpObject,28+cnt)
			poke ref,cnt,prm
			if prm=0 : break
		loop
		retval(0) = -1*lpObject(0)
		if lpObject(4)>400 : retval(1)=1 : else : retval(1)=0
		if ((lpObject(5))&&($ff))!0 : retval(1)+=2
		retval(2) = chf(4)/10
		retval(3) = peek(chf,24)
		retval(4) = peek(chf,25)
		retval(5) = peek(chf,26)
		retval(6) = peek(lpObject,21)
		retval(7) = peek(lpObject,22)
	}
	repeat 8 : prm1(cnt)=retval(cnt) : loop
	;  prm1の数値型配列変数に返される値
	;   (0)   : font size (HSPで利用する論理サイズ)
	;   (1)   : font書体
	;              -  0 = NORMAL
	;              -  1 = BOLD
	;              -  2 = ITALIC
	;              -  3 = BOLD|ITALIC
	;   (2)   : font size (pt)
	;   (3),(4),(5) : color r,g,b
	;   (6)   : 下線
	;   (7)   : 打消し線
	dim lpObject,0  : dim chf,0 : dim retval,0
	return ret
#global