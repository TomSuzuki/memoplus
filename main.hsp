// コンパイルの設定
#packopt icon "./icon.ico"
#packopt version "バージョン.txt"

// ライブラリのインクルード
#include "lib.hsp"
#include "lib2.hsp"
#include "lib3.hsp"
#include "obj.as"
#include "user32.as"

// 設定
#define VersionMes		"Version 1.20"
#define CopyrightMes	"Copyright 2015-2017 BENIKAGE220"

// タブのID割り振り
#enum MenuTab_NewFile = 1
#enum MenuTab_Open
#enum MenuTab_NameSave
#enum MenuTab_Save
#enum MenuTab_Printing
#enum MenuTab_Exit
#enum MenuTab_NewPage
#enum MenuTab_DelPage
#enum MenuTab_Version
#enum MenuTab_Rename
#enum MenuTab_MakeTxt
#enum MenuTab_Font
#enum MenuTab_Statusbar
#enum MenuTab_PageTab
#enum MenuTab_PageSorting
#enum MenuTab_PageBase = 1024

// メニューのID割り振り
#enum MenuMain_File = 1
#enum MenuMain_Edit
#enum MenuMain_Format
#enum MeneMain_View
#enum MenuMain_Page
#enum MenuMain_Help

// 画面のID割り振り
#enum BufferPageSorting = 1
#enum BufferRename
#enum TabBufferBase

// 表示文字の設定
#define TitleMes1	"メモ帳＋  ["+VersionMes+"]"
#define TitleMes2	"更新"

// テキストデータを保存するモジュール
#module ModuleTabData name,data
#modinit str p1,str p2
	name = p1
	data = p2
	return
#modcfunc GetTabName
	return name
#modcfunc GetTabData
	return data
#modfunc SetTabName str p1
	name = p1
	return
#modfunc SetTabData str p1
	data = p1
	return
#global

#module
#defcfunc CountPageNum
	ct = 0
	foreach TabData@
		ct++
	loop
	return ct
#global

// ここから本体 -----------------------------------------------------------------------------------
	// コンフィグのロード
	notesel notedata
	enoteload "config.csv"
	SetConfigData notedata
		FontName = LoadConfig("FontName","ＭＳ ゴシック")
		FontSize = int(LoadConfig("FontSize","15"))
		FontStyle = int(LoadConfig("FontStyle","0"))
		Statusbar = int(LoadConfig("Statusbar","0"))
		PageTab = int(LoadConfig("PageTab","0"))
	SaveConfig "config.csv"

	// 初期化
	sdim boxdata,0xFFFFFF

	// 初期データ
	StartDir = dir_cur	//カレントディレクトリ
	File = dir_cmdline	//カレントファイル
	File = "./testdata/a.txp"	;テストデータの読み込み
	strrep File,"\"",""	//パスの整形
	exist File					//ファイルが存在するか？
	if strsize = -1:File = "null"	//存在しないならファイル名をnullにする

	// 名前変更用ウィンドウを作成
	screen BufferRename,320,96,2+4
		title "名前の変更"

	// ソート用ウィンドウ
	screen BufferPageSorting,320,480,2+4
		title "ページの並べ替え"

	// メインウィンドウを作成
	ovscreen 0,640,480
		title TitleMes1
		hwnd_MainWindow = hwnd

	// メインのボックスを配置
	objmode 2,0:font FontName,FontSize,FontStyle
	pos 0,PageTab*20:mesbox boxdata,ginfo_winx,ginfo_winy-20*Statusbar-PageTab*20,5,-1
	objbox = stat

	// ボタンの配置
	objsize 20,20
		pos -21,-21:button gosub "+",*Label_NewPage	:IDButton_NewPage = stat
		pos -21,-21:button gosub ">",*Label_PageNext:IDButton_PageNext = stat
		pos -21,-21:button gosub "<",*Label_PageBack:IDButton_PageBack = stat

	// データの初期化
	pPageID = -1
	FlgUpDate = 0
	dimtype TabData,vartype("struct")

	// ドラッグ＆ドロップの呼び出し設定
	DandD_SetWindow 1
	DandD_SetSubLabel *Label_GetDDFile

	// 初期配置
	gosub*Label_SetMenu
	gosub*Label_SetMesbox
	gosub*Label_Open
	gosub*Label_PageTab

	// 受け取りコマンドの呼び出し設定
	oncmd gosub *Label_WindowCommand, 0x00005
	oncmd gosub *Label_MenuCommand, 	0x00111
	oncmd gosub *Label_notify, $4E

	// HSPの割り込みラベル設定
	onexit gosub *Label_Exit
	onkey gosub *Label_Key

	stop

// 表示（文字）
*Label_DrawStrings

	// ステータスバー
	if(Statusbar){
		UpdateMesg = "[更新]"
		if FlgUpDate = 0:UpdateMesg = ""
		
		color 240,240,240:boxf 0,ginfo_winy-20,ginfo_winx,ginfo_winy
		color 0:font msgothic,15
		pos 5,ginfo_winy-17:mes dName+" / "+dPage
		x = limit(ginfo_winx-240,ginfo_mesx+64,ginfo_winx)
		color 210,210,210:line x-24,ginfo_winy-20,x-24,ginfo_winy:color 0
		pos x,ginfo_winy-17:mes strf("%dページ　%s",1+pPageID,UpdateMesg)

		// 更新があったら文字を表示
		;if FlgUpDate = 1:pos ginfo_winx-5,ginfo_winy-3:edmes "[更新]"
	}

	return

// キー
*Label_Key

	if FlgUpDate = 0{
		gsel 0
		sendmsg objinfo(objbox,2), 0xB8	:FlgUpDate = stat
		if(FlgUpDate):gosub*Label_DrawStrings
	}

	getkey Ctrl,17

	if Ctrl = 1{
		switch iparam
		case 65	//a
			sendmsg objinfo(objbox,2),0xB1,0,-1
			swbreak
		case 83	//s
			if File = "null"{
				gosub*Label_NameSave
			}else{
				gosub*Label_Save
			}
			swbreak
		case 78	//n
			swbreak
		case 79	//o
			swbreak
		swend
	}

	return

// 終了
*Label_Exit

	EnableWindow hwnd_MainWindow,1

	if ginfo(2) != 0{
		gsel ginfo(2),-1
		return
	}

	if FlgUpDate = 0{
		gsel 0
		sendmsg objinfo(objbox,2), 0xB8
		FlgUpDate = stat
	}

	if FlgUpDate = 1{
		dialog "ファイルは更新されています。\n閉じますか？",2
		if stat = 7:return
	}

	// すべてのメニューを破棄
	gsel 0
	repeat length(hMenu)
		DestroyMenu hMenu.cnt
	loop

	clrobj
	
	end

// 名前をつけて保存
*Label_NameSave

	dialog "txp",17,"メモ帳＋ファイル"
	if stat ! 1:return

	File = refstr
	if getpath(File,2) = "":File = File + ".txp"

	gosub*Label_Save

	return

// 保存（Fileにセーブ）
*Label_Save

	// 更新情報をリセット
	FlgUpDate = 0
	pboxdata = boxdata

	// データの更新
	SetTabData TabData(pPageID),boxdata

	// 保存のためのデータを構成
	data1 = ""
	data2 = ""
	foreach TabData
		name = GetTabName(TabData(cnt))
		data = GetTabData(TabData(cnt))
		strrep data,"\n","\n"
		data1 = data1 + (stat+1) + "," + name + "\n"
		data2 = data2 + data + "\n"
	loop
	data = data1 + "END\n" + data2

	// 保存
	notesel data
	notesave File
	noteunsel

	// 更新などの文字を初期化
	gosub*Label_DrawStrings

	return

// 開く（Fileにファイルパスが入っている※nullで初期化）
*Label_Open

	// 読み込むデータに問題がないかチェック（ENDマーカーがあるかチェック）
	notesel loaddata
	noteload File
	flg = 1
	repeat noteinfo(0)
		noteget data,cnt
		if data = "END":flg = 0:break
	loop
	if(flg){
		dialog "ファイルの読み込みに失敗しました。",1
		return
	}
	noteunsel

	// 初期化
	dimtype TabData,vartype("struct")
	pPageID = 0

	// ファイルを読み込む
	if File = "null"{
		newmod TabData,ModuleTabData,"無題のページ",""
		boxdata = ""
		objprm objbox,boxdata
	}else{
		Flg = -1
		n = 0
		notesel loaddata
		noteload File
		dimtype NoteLine,vartype("int"),noteinfo(0)
		dimtype NoteName,vartype("str"),noteinfo(0)
		dimtype NoteData,vartype("str"),noteinfo(0)
		repeat noteinfo(0)
			noteget data,cnt
			n = n + 1
			if Flg = -1{
				split data,",",a,b
				if data = "END":Flg = 0
				NoteLine(cnt) = int(a)
				NoteName(cnt) = b
				n = 0
			}else{
				if NoteData(Flg) ! "":NoteData(Flg) = NoteData(Flg) + "\n"
				NoteData(Flg) = NoteData(Flg) + data
				if n >= NoteLine(Flg) && NoteLine(Flg) ! 0{
					newmod TabData,ModuleTabData,NoteName(Flg),NoteData(Flg)
					n = 0
					Flg = Flg + 1
				}
			}
		loop
		noteunsel
		if Flg = 0:newmod TabData,ModuleTabData,"無題のページ",""
		boxdata = GetTabData(TabData(0))
		objprm objbox,boxdata
	}

	pboxdata = boxdata

	gosub*Label_SetMenu
	gosub*Label_SetMesbox
	gosub*Label_PageTab
	
	return

// テキストとして開く
*Label_OpenText

	// 初期化
	dimtype TabData,vartype("struct")
	pPageID = 0

	// 読み込み
	notesel loaddata
	noteload File
	dimtype NoteLine,vartype("int"),1
	dimtype NoteName,vartype("str"),1
	dimtype NoteData,vartype("str"),1
	NoteLine(0) = noteinfo(0)
	NoteName(0) = "無題のページ"
	NoteData(0) = loaddata
	newmod TabData,ModuleTabData,NoteName(0),NoteData(0)
	noteunsel

	boxdata = GetTabData(TabData(0))
	objprm objbox,boxdata

	// その他
	File = "null"
	pboxdata = boxdata

	gosub*Label_SetMenu
	gosub*Label_SetMesbox
	gosub*Label_PageTab

	return

// メニューバー受け取り
*Label_MenuCommand

	if lparam = 0{
		n = wparam&$FFFF
		switch(n)
		case MenuTab_Exit			//終了
			gosub*Label_Exit
			swbreak
		case MenuTab_Version	//バージョン情報
			dialog "メモ帳＋  "+VersionMes+"\n"+CopyrightMes,," version"
			swbreak
		case MenuTab_Open			//開く
			dialog "txp",16,"メモ帳＋ファイル"
			if stat = 1{
				File = refstr
				gosub*Label_Open
			}
			swbreak
		case MenuTab_NewPage	//新規ページ
			gosub*Label_CreateNewPage
			swbreak
		case MenuTab_NewFile	//新規ファイル
			File = "null"
			gosub*Label_Open
			swbreak
		case MenuTab_NameSave	//名前を付けて保存
			gosub*Label_NameSave
			swbreak
		case MenuTab_Rename		//名前変更
			gosub*Label_Rename
			swbreak
		case MenuTab_MakeTxt	//テキストとして保存
			gosub*Label_MakeTxt
			swbreak
		case MenuTab_Save			//上書き保存
			if File = "null"{
				gosub*Label_NameSave
			}else{
				gosub*Label_Save
			}
			swbreak
		case MenuTab_PageSorting	//ページの並べ替え
			gosub*PageSorting
			swbreak
		case MenuTab_DelPage	//削除
			gosub*Label_Delete
			gosub*Label_SetMenu
			swbreak
		case MenuTab_Font			//フォント変更
			gosub*Label_Font
			swbreak
		case MenuTab_Statusbar//ステータスバー
			Statusbar = (Statusbar == 0)
			notesel notedata
			enoteload "config.csv"
			SetConfigData notedata
				UpdateConfig "Statusbar",str(Statusbar)
			SaveConfig "config.csv"

			CheckMenuItem hMenu.MeneMain_View, MenuTab_Statusbar,Statusbar*8
			gosub*Label_SetMesbox
			swbreak
		case MenuTab_PageTab	//ページタブ
			PageTab = (PageTab == 0)
			notesel notedata
			enoteload "config.csv"
			SetConfigData notedata
				UpdateConfig "PageTab",str(PageTab)
			SaveConfig "config.csv"

			CheckMenuItem hMenu.MeneMain_View, MenuTab_PageTab,PageTab*8
			gosub*Label_SetMesbox
			gosub*Label_PageTab
			swbreak
		default								//タブ変更
			NextTab = n-MenuTab_PageBase
			gosub*Label_ChangePage
			swbreak
		swend
	}

	return

// ページ変更
*Label_ChangePage
	if 0 <= NextTab{
		SetTabData TabData(pPageID),boxdata
		boxdata = GetTabData(TabData(NextTab))
		objprm objbox,boxdata
		CheckMenuRadioItem hMenu.MenuMain_Page, MenuTab_PageBase, MenuTab_PageBase+length(TabData), NextTab+MenuTab_PageBase, 0x0100
		pPageID = NextTab
		ChangeTab2 NextTab
		gosub*Label_SetMesbox
	}
	return

// ページ削除
*Label_Delete

	tempFile = File
	File = StartDir+"/~temp.txp"

	data1 = ""
	data2 = ""

	foreach TabData
		if pPageID = cnt:continue
		name = GetTabName(TabData(cnt))
		data = GetTabData(TabData(cnt))
		strrep data,"\n","\n"
		data1 = data1 + (stat+1) + "," + name + "\n"
		data2 = data2 + data + "\n"
	loop

	data = data1 + "END\n" + data2
	notesel data
	notesave File
	noteunsel

	
	gosub*Label_Open
	
	File = tempFile
	FlgUpDate = 1

	gosub*Label_DrawStrings
	
	return

// 名前変更
*Label_Rename
	gsel BufferRename,2
	cls 1
	newname = GetTabName(TabData(pPageID))
	objmode 2,0:font msgothic,18
	pos 20,20:input newname,280,24,32
	objmode 2,0:font msgothic,12
	objsize 80,24,24
	pos 120,64	:button goto "決定",*Label_RenameOK
	pos 220,64	:button goto "キャンセル",*Label_RenameCancel
	return

// 名前変更（確定 newname）
*Label_RenameOK
	if newname = ""{
		dialog "無効な名前です。"
		stop
	}
	SetTabName TabData(pPageID),newname
	gsel BufferRename,-1
	gosub*Label_SetMenu
	CheckMenuRadioItem hMenu.MenuMain_Page, MenuTab_PageBase, MenuTab_PageBase+length(TabData), pPageID, 0x0100

	FlgUpDate = 1
	gosub*Label_DrawStrings
	stop

// 名前変更（キャンセル）
*Label_RenameCancel
	gsel BufferRename,-1
	stop

// 非アクティブになったらウィンドウを消す
*Label_ReDrawCommand
	if ginfo(2) ! BufferRename:gsel BufferRename,-1
	return

// 画面サイズ変更受けとり
*Label_WindowCommand

	gosub*Label_SetMesbox
	gosub*Label_PageTab
	
	return

// メッセージボックス
*Label_SetMesbox

	dName = getpath(File,8)
	if pPageID ! -1:dPage = GetTabName(TabData(pPageID)):else:dPage = "無題"
	if File = "null":dName = "無題"

	size = ginfo_winx,ginfo_winy-20*Statusbar-PageTab*20,0,PageTab*20
	resizeobj objbox,size,0

	gosub*Label_DrawStrings

	pboxdata = boxdata
	
	return

// ページタブ
*Label_PageTab

	DeleteTab

	if PageTab != 1{
		size = 20,20,-21,-21
		resizeobj IDButton_NewPage,size
		resizeobj IDButton_PageNext,size
		resizeobj IDButton_PageBack,size
		return
	}

	pos 0,0
	CreateTab ginfo_winx-60, 20, TabBufferBase, $8
		hTabControl = stat
		foreach(TabData)
			InsertTab GetTabName(TabData(cnt))
		loop
		
	gsel TabBufferBase,1
	gsel 0

	size = 20,20,ginfo_winx-20,0:	resizeobj IDButton_NewPage,size
	size = 20,20,ginfo_winx-40,0:	resizeobj IDButton_PageNext,size
	size = 20,20,ginfo_winx-60,0:	resizeobj IDButton_PageBack,size

	ChangeTab2 pPageID

	return

*Label_notify
	dupptr nmhdr, lparam, 12
	if nmhdr.0 = hTabControl & nmhdr.2 = -551 {
		ChangeTab
		NextTab = stat
		gosub*Label_ChangePage
		gsel 0
	}
	return

// 新規ページを作成＆作ったページに移動
*Label_CreateNewPage
	newmod TabData,ModuleTabData,"無題のページ",""

	ct = 0:foreach TabData:ct++:loop
	NextTab = ct-1

	FlgUpDate = 1

	gosub*Label_SetMenu
	gosub*Label_PageTab
	gosub*Label_ChangePage
	
	return

// 新規ページ
*Label_NewPage
	gosub*Label_CreateNewPage
	return

// ページを一つ進める
*Label_PageNext
	NextTab = pPageID + 1
	ct = 0:foreach TabData:ct++:loop
	if ct <= NextTab:return
	gosub*Label_ChangePage
	return

// ページを一つ戻す
*Label_PageBack
	NextTab = pPageID - 1
	if NextTab < 0:return
	gosub*Label_ChangePage
	return

// メニューバー
*Label_SetMenu
	
	gsel 0

	//一回削除
	repeat length(hMenu)
		DestroyMenu hMenu.cnt
	loop

	// メニューの構成
	CreatePopupMenu
	hMenu.MenuMain_File = stat		// ファイル
		AppendMenu hMenu.MenuMain_File, 0, MenuTab_NewFile, 	"新規作成(&N)";\tCtrl+N"
		AppendMenu hMenu.MenuMain_File, 0, MenuTab_Open, 			"開く(&O)";\tCtrl+O"
		AppendMenu hMenu.MenuMain_File, 0, MenuTab_NameSave, 	"名前を付けて保存(&S)"
		AppendMenu hMenu.MenuMain_File, 0, MenuTab_Save, 			"上書き保存(&A)\tCtrl+S"
		AppendMenu hMenu.MenuMain_File, 0, MenuTab_MakeTxt,		"テキストファイルとして出力"
		AppendMenu hMenu.MenuMain_File, 0x0800, 0, ""
		AppendMenu hMenu.MenuMain_File, 0, MenuTab_Exit, 			"終了(&Q)"

	CreatePopupMenu
	hMenu.MenuMain_Edit = stat		// 編集
		AppendMenu hMenu.MenuMain_Edit, 0, MenuTab_NewPage, 		"新しいページを追加(&N)"
		AppendMenu hMenu.MenuMain_Edit, 0, MenuTab_Rename, 			"このページのタイトルを変更"
		AppendMenu hMenu.MenuMain_Edit, 0x0800, 0, 							""
		AppendMenu hMenu.MenuMain_Edit, 0, MenuTab_PageSorting, "ページの並べ替え"
		AppendMenu hMenu.MenuMain_Edit, 0x0800, 0, 							""
		AppendMenu hMenu.MenuMain_Edit, 0, MenuTab_DelPage,			"このページを削除(&D)"

	CreatePopupMenu
	hMenu.MenuMain_Format = stat	// 書式
		AppendMenu hMenu.MenuMain_Format, 0, MenuTab_Font, 		"フォント(&F)..."

	CreatePopupMenu
	hMenu.MeneMain_View = stat		// 表示
		AppendMenu hMenu.MeneMain_View, 0x0008, MenuTab_Statusbar, 	"ステータスバー(&S)"
		AppendMenu hMenu.MeneMain_View, 0x0008, MenuTab_PageTab, 		"ページタブ"

	CreatePopupMenu
	hMenu.MenuMain_Page = stat		// ページ
		foreach(TabData)
			AppendMenu hMenu.MenuMain_Page, 0, MenuTab_PageBase+cnt,	GetTabName(TabData(cnt))
		loop
		CheckMenuRadioItem hMenu.MenuMain_Page, MenuTab_PageBase, MenuTab_PageBase+length(TabData), MenuTab_PageBase, 0x0100
	
	CreatePopupMenu
	hMenu.MenuMain_Help = stat		// ヘルプ
		AppendMenu hMenu.MenuMain_Help, 0, MenuTab_Version, 	"バージョン(&A)"

	CreateMenu
	hMenu.0 = stat	// メイン
		AppendMenu hMenu.0, 0x0010, hMenu.MenuMain_File, 		"ファイル(&F)"
		AppendMenu hMenu.0, 0x0010, hMenu.MenuMain_Edit, 		"編集(&E)"
		AppendMenu hMenu.0, 0x0010, hMenu.MenuMain_Format, 	"書式(&O)"
		AppendMenu hMenu.0, 0x0010, hMenu.MeneMain_View, 		"表示(&V)"
		AppendMenu hMenu.0, 0x0010, hMenu.MenuMain_Page,	 	"ページ(&P)"
		AppendMenu hMenu.0, 0x0010, hMenu.MenuMain_Help, 		"ヘルプ(&H)"

	SetMenu hwnd, hMenu.0
	DrawMenuBar hwnd

	// チェックマーク
	CheckMenuItem hMenu.MeneMain_View, MenuTab_Statusbar,Statusbar*8
	CheckMenuItem hMenu.MeneMain_View, MenuTab_PageTab,PageTab*8
	
	return

// テキスト化
*Label_MakeTxt

	// 保存する場所を指定
	dialog "txt",17,"テキスト文書"
	if stat = 0:return

	// ファイル名を整形
	txtFile = refstr
	if getpath(txtFile,2) = "":txtFile = txtFile + ".txt"

	// 保存
	notesel boxdata
	notesave txtFile
	noteunsel

	return

// ドラッグ＆ドロップの呼び出しラベル
*Label_GetDDFile
	DandD_GetList list

	if FlgUpDate = 0{
		gsel 0
		sendmsg objinfo(objbox,2), 0xB8
		FlgUpDate = stat
	}

	if FlgUpDate = 1{
		dialog "ファイルは更新されています。\n変更を保存せずに別のファイルを開きますか？",2
		if stat = 7:return
	}

	FlgUpDate = 0

	notesel list
	noteget a,0
	switch getpath(a,2+16)
	case ".txp"
		File = a
		gosub*Label_Open
		swbreak
	case ".txt"
		File = a
		gosub*Label_OpenText
		swbreak
	default
		dialog "テキストプラスファイルではありません。",,"Error"
		swbreak
	swend
	noteunsel

	stop

// フォント変更のための場所
*Label_Font

	// ダイアログを開く
	fontdlg n,$100
	if stat = 0:return
	opt = n(1)
	if n(6) = 1:opt = opt + 4
	if n(7) = 1:opt = opt + 8

	// データの整形
	FontName = refstr
	FontSize = n(0)
	FontStyle = opt

	// コンフィグのセット
	notesel notedata
	enoteload "config.csv"
	SetConfigData notedata
		UpdateConfig "FontName",FontName
		UpdateConfig "FontSize",str(FontSize)
		UpdateConfig "FontStyle",str(FontStyle)
	SaveConfig "config.csv"

	// アップデート
	gosub *Label_SetMesbox

	clrobj objbox,objbox
	objmode 2,0:font FontName,FontSize,FontStyle
	pos 0,PageTab*20:mesbox boxdata,ginfo_winx,ginfo_winy-20*Statusbar-PageTab*20,5,-1
	objbox = stat

	return

//ページの並べ替え
*PageSorting

	gsel BufferPageSorting,2
	cls 1

	// ページのリストを作成
	PageList = ""
	dimtype PageListID,vartype("int"),CountPageNum()
	foreach TabData
		if cnt != 0:PageList = PageList + "\n"
		PageList = PageList + GetTabName(TabData.cnt)
		PageListID(cnt) = cnt
	loop

	// オブジェクトの配置
	objsize 320,120:lsNumber = pPageID
	pos 0,0:listbox lsNumber,120,PageList
	lsID = stat

	// ボタンの配置
	objsize 80,24,24
	pos 220,440	:button gosub "キャンセル",*PageSortingButton			:ButtonIDPageSorting_Cancel = stat
	pos 120,440	:button gosub "決定",*PageSortingButton						:ButtonIDPageSorting_OK = stat
	pos 20,260	:button gosub "一つ上へ",*PageSortingButton				:ButtonIDPageSorting_Up = stat
	pos 120,260	:button gosub "一つ下へ",*PageSortingButton				:ButtonIDPageSorting_Down = stat
	pos 220,260	:button gosub "削除",*PageSortingButton						:ButtonIDPageSorting_Delete = stat
	pos 20,310	:button gosub "名前で並び替え",*PageSortingButton	:ButtonIDPageSorting_Sort = stat
	pos 20,360	:button gosub "新しいページ",*PageSortingButton		:ButtonIDPageSorting_New = stat

	// ボタンに対する文字
	font msgothic,10
	pos 10,245	:mes "選択しているページを"
	pos 10,295	:mes "すべてのページを"
	pos 10,345	:mes "その他の作業"

	gsel 0

	EnableWindow hwnd_MainWindow,0

	return

*PageSortingButton

	switch stat
	case ButtonIDPageSorting_Cancel
		EnableWindow hwnd_MainWindow,1
		gsel BufferPageSorting,-1
		swbreak
	case ButtonIDPageSorting_OK

		swbreak
	case ButtonIDPageSorting_Up
		if lsNumber > 0{
			temp = PageListID(lsNumber-1)
			PageListID(lsNumber) = temp
			PageListID(lsNumber-1) = PageListID(lsNumber)
			gsel BufferPageSorting
			sdim listbox_text
			sendmsg objinfo(lsID,2),$188:index = stat
			sendmsg objinfo(lsID,2),$189,index,varptr(listbox_text)
			sendmsg objinfo(lsID,2),$182,index
			sendmsg objinfo(lsID,2),$181,index-1,listbox_text
			sendmsg objinfo(lsID,2),$186,index-1
			gsel 0
		}
		swbreak
	case ButtonIDPageSorting_Down
		if lsNumber < CountPageNum(){
			temp = PageListID(lsNumber+1)
			PageListID(lsNumber) = temp
			PageListID(lsNumber+1) = PageListID(lsNumber)
			gsel BufferPageSorting
			sdim listbox_text
			sendmsg objinfo(lsID,2),$188:index = stat
			sendmsg objinfo(lsID,2),$189,index,varptr(listbox_text)
			sendmsg objinfo(lsID,2),$182,index
			sendmsg objinfo(lsID,2),$181,index+1,listbox_text
			sendmsg objinfo(lsID,2),$186,index+1
			gsel 0
		}
		swbreak
	case ButtonIDPageSorting_Delete
		swbreak
	case ButtonIDPageSorting_Sort
		swbreak
	case ButtonIDPageSorting_New
		swbreak
	swend

	return
	